// Code generated by protoc-gen-go.
// source: github.com/Rakanixu/factorial-micro-service/server/proto/factorial.proto
// DO NOT EDIT!

/*
Package factorial is a generated protocol buffer package.

It is generated from these files:
	github.com/Rakanixu/factorial-micro-service/server/proto/factorial.proto

It has these top-level messages:
	FactorialRequest
	FactorialResponse
*/
package factorial

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type FactorialRequest struct {
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *FactorialRequest) Reset()                    { *m = FactorialRequest{} }
func (m *FactorialRequest) String() string            { return proto.CompactTextString(m) }
func (*FactorialRequest) ProtoMessage()               {}
func (*FactorialRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FactorialResponse struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *FactorialResponse) Reset()                    { *m = FactorialResponse{} }
func (m *FactorialResponse) String() string            { return proto.CompactTextString(m) }
func (*FactorialResponse) ProtoMessage()               {}
func (*FactorialResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*FactorialRequest)(nil), "FactorialRequest")
	proto.RegisterType((*FactorialResponse)(nil), "FactorialResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Factorial service

type FactorialClient interface {
	CalcFactorial(ctx context.Context, in *FactorialRequest, opts ...client.CallOption) (*FactorialResponse, error)
}

type factorialClient struct {
	c           client.Client
	serviceName string
}

func NewFactorialClient(serviceName string, c client.Client) FactorialClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "factorial"
	}
	return &factorialClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *factorialClient) CalcFactorial(ctx context.Context, in *FactorialRequest, opts ...client.CallOption) (*FactorialResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Factorial.CalcFactorial", in)
	out := new(FactorialResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Factorial service

type FactorialHandler interface {
	CalcFactorial(context.Context, *FactorialRequest, *FactorialResponse) error
}

func RegisterFactorialHandler(s server.Server, hdlr FactorialHandler) {
	s.Handle(s.NewHandler(&Factorial{hdlr}))
}

type Factorial struct {
	FactorialHandler
}

func (h *Factorial) CalcFactorial(ctx context.Context, in *FactorialRequest, out *FactorialResponse) error {
	return h.FactorialHandler.CalcFactorial(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xf2, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x0f, 0x4a, 0xcc, 0x4e, 0xcc, 0xcb, 0xac, 0x28, 0xd5,
	0x4f, 0x4b, 0x4c, 0x2e, 0xc9, 0x2f, 0xca, 0x4c, 0xcc, 0xd1, 0xcd, 0xcd, 0x4c, 0x2e, 0xca, 0xd7,
	0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x07, 0xd1, 0xa9, 0x45, 0xfa, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x08, 0x45, 0x7a, 0x60, 0xbe, 0x92, 0x16, 0x97, 0x80, 0x1b, 0x4c, 0x28, 0x28, 0xb5,
	0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x8c, 0x8b, 0x2d, 0xaf, 0x34, 0x37, 0x29, 0xb5, 0x48, 0x82,
	0x51, 0x81, 0x51, 0x83, 0x35, 0x08, 0xca, 0x53, 0xd2, 0xe6, 0x12, 0x44, 0x52, 0x5b, 0x5c, 0x90,
	0x9f, 0x57, 0x9c, 0x0a, 0x52, 0x5c, 0x94, 0x5a, 0x5c, 0x9a, 0x53, 0x02, 0x53, 0x0c, 0xe1, 0x19,
	0xb9, 0x72, 0x71, 0xc2, 0x15, 0x0b, 0x59, 0x70, 0xf1, 0x3a, 0x27, 0xe6, 0x24, 0x23, 0x04, 0x04,
	0xf5, 0xd0, 0x6d, 0x95, 0x12, 0xd2, 0xc3, 0x30, 0x5c, 0x89, 0x21, 0x89, 0x0d, 0xec, 0x4c, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xda, 0x4f, 0x11, 0xc4, 0xf2, 0x00, 0x00, 0x00,
}
